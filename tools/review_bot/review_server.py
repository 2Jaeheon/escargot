#!/usr/bin/env python3
import os
import json
import requests
from fastapi import FastAPI, Request
import uvicorn

OLLAMA_URL = os.getenv("OLLAMA_URL", "http://localhost:11434/api/generate")
MODEL = os.getenv("OLLAMA_MODEL", "llama3")

app = FastAPI()

@app.post("/review")
async def review_code(req: Request):
    """
    Receives a JSON payload: { "diff": "<git diff contents>" }
    Reads raw body first to avoid JSONDecodeError on control chars.
    """
    try:
        raw_body = await req.body()
        try:
            data = json.loads(raw_body)
        except Exception as e:
            return {"review": f"[ERROR] Could not parse JSON body: {e}"}
    except Exception as e:
        return {"review": f"[ERROR] Failed to read request body: {e}"}

    diff = data.get("diff", "")
    if not isinstance(diff, str):
        return {"review": "[ERROR] 'diff' is not a string."}
    if not diff.strip():
        return {"review": "[ERROR] No diff content received."}

    prompt = f"""
You are a strict code reviewer for the Escargot JavaScript engine project.
Review the following PR diff for:
1. ECMAScript spec compliance
2. Performance considerations
3. Code style
4. Potential bugs

PR Diff:
{diff}
"""

    try:
        ollama_resp = requests.post(
            OLLAMA_URL,
            json={"model": MODEL, "prompt": prompt, "stream": False},
            timeout=120
        )
        ollama_resp.raise_for_status()
    except Exception as e:
        return {"review": f"[ERROR] Failed to call Ollama API: {e}"}

    try:
        review_text = ollama_resp.json().get("response", "").strip()
    except Exception:
        return {"review": "[ERROR] Ollama returned invalid JSON."}

    if not review_text:
        return {"review": "[ERROR] Empty review generated by Ollama."}

    return {"review": review_text}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=3000)