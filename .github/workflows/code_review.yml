name: Code Review

on:
  pull_request:

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get diff
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }}
          DIFF=$(git diff --unified=20 origin/${{ github.base_ref }} HEAD)
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Call Code Review API
        id: review
        uses: actions/github-script@v6
        env:
          GIT_DIFF: "${{ steps.diff.outputs.diff }}"
        with:
          script: |
            const diff = process.env.GIT_DIFF;
            const response = await fetch('https://solving-substantially-valued-anymore.trycloudflare.com/review', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ diff })
            });
            const data = await response.json();
            console.log('API raw:', data);
            const comments = data.comments || [];
            console.log('Comments array:', comments);
            return JSON.stringify(comments);
          
      - name: Create review with inline comments
        uses: actions/github-script@v6
        env:
          INLINE_COMMENTS: "${{ steps.review.outputs.result }}"
          GIT_DIFF: "${{ steps.diff.outputs.diff }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const diff = process.env.GIT_DIFF || '';
            const raw = process.env.INLINE_COMMENTS || '[]';
            console.log('INLINE_COMMENTS raw:', raw);
            let comments;
            try {
              comments = JSON.parse(raw);
              if (typeof comments === 'string') {
                comments = JSON.parse(comments);
              }
            } catch (e) {
              console.log('JSON parse error:', e);
              comments = [];
            }

            // Build mapping of { filePath: { newLineNumber: diffPosition } }
            function buildPositionMap(diffText) {
              const map = {};
              let currentFile = null;
              let newLine = 0;
              let position = 0;
              for (const line of diffText.split('\n')) {
                if (line.startsWith('diff --git')) {
                  currentFile = null;
                  continue;
                }
                if (line.startsWith('+++ b/')) {
                  currentFile = line.slice(6).trim();
                  if (!map[currentFile]) map[currentFile] = {};
                  continue;
                }
                if (!currentFile) continue;
                if (line.startsWith('@@')) {
                  const m = /@@ -\d+(?:,\d+)? \+(\d+)(?:,(\d+))? @@/.exec(line);
                  if (m) {
                    newLine = parseInt(m[1], 10);
                  }
                  continue;
                }
                position += 1;
                const firstChar = line[0];
                if (firstChar === '+') {
                  map[currentFile][newLine] = position;
                  newLine += 1;
                } else if (firstChar === ' ') {
                  map[currentFile][newLine] = position;
                  newLine += 1;
                } else if (firstChar === '-') {
                  // removed line; do nothing for newLine
                }
              }
              return map;
            }

            const positionMap = buildPositionMap(diff);

            const formatted = [];
            for (const c of comments) {
              if (!c.path || typeof c.line !== 'number' || !c.body) continue;
              const pos = positionMap[c.path]?.[c.line];
              if (!pos) {
                console.log(`Skipping comment on ${c.path}:${c.line} - not in diff`);
                continue;
              }
              formatted.push({
                path: c.path,
                position: pos,
                body: c.body
              });
            }

            console.log('Formatted comments:', formatted);
            if (formatted.length === 0) {
              console.log('No valid inline comments to post.');
              return;
            }

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              commit_id: context.payload.pull_request.head.sha,
              event: 'COMMENT',
              comments: formatted
            });