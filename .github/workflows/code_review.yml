name: Code Review

on:
  pull_request:

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get diff
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }}
          # -U0 옵션으로 변경된 줄만 포함하여 LLM 의 라인 계산을 단순화
          DIFF=$(git diff -U0 origin/${{ github.base_ref }} HEAD)
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Call Code Review API
        id: review
        uses: actions/github-script@v6
        env:
          GIT_DIFF: "${{ steps.diff.outputs.diff }}"
        with:
          script: |
            const diff = process.env.GIT_DIFF;
            const response = await fetch('https://solving-substantially-valued-anymore.trycloudflare.com/review', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ diff })
            });
            const data = await response.json();
            console.log('API raw:', data);
            const comments = data.comments || [];
            console.log('Comments array:', comments);
            return JSON.stringify(comments);
          
      - name: Create review with inline comments
        uses: actions/github-script@v6
        env:
          INLINE_COMMENTS: "${{ steps.review.outputs.result }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let raw = process.env.INLINE_COMMENTS || '[]';
            console.log('INLINE_COMMENTS raw:', raw);
            let comments;
            try {
              comments = JSON.parse(raw);
              // sometimes one level of quotes 더 있을 수 있음
              if (typeof comments === 'string') {
                comments = JSON.parse(comments);
              }
            } catch (e) {
              console.log('JSON parse error:', e);
              comments = [];
            }
            console.log('Parsed comments array:', comments);
            if (!Array.isArray(comments) || comments.length === 0) {
              console.log('No inline comments generated.');
              return;
            }
            const commitId = context.payload.pull_request.head.sha;
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              commit_id: commitId,
              event: 'COMMENT',
              comments
            });